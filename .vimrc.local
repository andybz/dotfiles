runtime macros/matchit.vim

set number

iabbr rpry require 'pry-remote'; binding.remote_pry;

syntax enable
set background=dark
colorscheme railscasts

autocmd BufEnter *.rb let g:turbux_command_rspec = 'bundle exec rspec'
autocmd BufEnter */bigcartel/bigcartel*.rb let g:turbux_command_rspec = 'bundle exec spec'

" Highlight long lines
match ErrorMsg '\%>83v.\+'

" Re-write sessions automatically on save
autocmd BufWrite * call RewriteSession()

function! RewriteSession()
  if !empty(v:this_session)
    exe "mksession! " . v:this_session
  endif
endfunction

" Refresh CtrlP cache all the time
nnoremap <silent> <leader>f :ClearCtrlPCache<cr>\|:CtrlP<cr>

" Stop CtrlP from looking in useless directories
set wildignore+=*/.git/*,*/vendor,*/node_modules,*/bower_components,*/tmp

" Set and unset cursorline
autocmd BufEnter * set cursorline
autocmd BufLeave * set nocursorline

" Quickly edit/reload the vimrc file
nmap <silent> <leader>ev :e ~/.vimrc.local<CR>
nmap <silent> <leader>sv :so ~/.vimrc<CR>

" RSpec Expect To
imap <leader>et expect().to<ESC>F(a

" RSpec Expect To Equal
imap <leader>ete expect().to eql<ESC>F(a

" RSpec Expect To Include
imap <leader>eti expect().to include<ESC>F(a

" RSpec Expect To Be
imap <leader>etb expect().to be_<ESC>F(a

" Convert minitest stub to RSpec allow
nmap <leader>sta V:s/stub/allow/g<CR>0f)llito receive(:<ESC>/ <CR>i)<ESC>

" Convert minitest mock to RSpec expect
nmap <leader>mte V:s/mock/expect/g<CR>0f)llito receive(:<ESC>/ <CR>i)<ESC>

" Scroll viewport faster
nnoremap <C-e> 3<C-e>
nnoremap <C-y> 3<C-y>

function! KillWhitespace()
  :silent %s/\t/  /g | %s/\s\+$//e
endfunction
